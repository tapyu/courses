function inference(Œºx_A, all_Œºy_B, I, ùê≤_range)
    if I == 3
        # 1th rule
        # IF x‚Çô IS MEDIUM
        # THEN y‚Çô IS HIGH
        Œºx_A‚ÇÇ = Œºx_A[2] # the input fuzzy set MEDIUM
        all_Œºy_B‚ÇÉ = all_Œºy_B[:,3] # the output fuzzy set HIGH
        ŒºAtoB‚ÅΩ¬π‚Åæ = map(min, fill(Œºx_A‚ÇÇ, length(all_Œºy_B‚ÇÉ)), all_Œºy_B‚ÇÉ) # Modus Ponens 
        
        # 2th rule
        # IF x‚Çô IS LOW
        # THEN y‚Çô IS MEDIUM
        Œºx_A‚ÇÅ = Œºx_A[1] # the input fuzzy set LOW
        all_Œºy_B‚ÇÇ = all_Œºy_B[:,2] # the output fuzzy set MEDIUM
        ŒºAtoB‚ÅΩ¬≤‚Åæ = map(min, fill(Œºx_A‚ÇÅ, length(all_Œºy_B‚ÇÇ)), all_Œºy_B‚ÇÇ) # Modus Ponens

        # 3th rule
        # IF x‚Çô IS HIGH
        # THEN y‚Çô IS LOW
        Œºx_A‚ÇÉ = Œºx_A[3] # the input fuzzy set LOW
        all_Œºy_B‚ÇÅ = all_Œºy_B[:,1] # the output fuzzy set MEDIUM
        ŒºAtoB‚ÅΩ¬≥‚Åæ = map(min, fill(Œºx_A‚ÇÉ, length(all_Œºy_B‚ÇÅ)), all_Œºy_B‚ÇÅ) # Modus Ponens

        # resulting output fuzzy set (aggregation)
        ŒºAtoB = map(max, ŒºAtoB‚ÅΩ¬π‚Åæ, ŒºAtoB‚ÅΩ¬≤‚Åæ, ŒºAtoB‚ÅΩ¬≥‚Åæ)

        # centroid mass (defuzzification)
        yÃÇ‚Çô = sum(ŒºAtoB.*ùê≤_range)./sum(ŒºAtoB)
    end

    return yÃÇ‚Çô
end